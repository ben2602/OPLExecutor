//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.13 at 10:49:01 AM CET 
//


package org.imf.oplexecutor.fims.bms;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for DataTypeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="DataTypeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="duration"/>
 *     &lt;enumeration value="dateTime"/>
 *     &lt;enumeration value="time"/>
 *     &lt;enumeration value="date"/>
 *     &lt;enumeration value="gYearMonth"/>
 *     &lt;enumeration value="gYear"/>
 *     &lt;enumeration value="gMonthDay"/>
 *     &lt;enumeration value="gDay"/>
 *     &lt;enumeration value="gMonth"/>
 *     &lt;enumeration value="boolean"/>
 *     &lt;enumeration value="base64Binary"/>
 *     &lt;enumeration value="hexBinary"/>
 *     &lt;enumeration value="float"/>
 *     &lt;enumeration value="double"/>
 *     &lt;enumeration value="anyURI"/>
 *     &lt;enumeration value="decimal"/>
 *     &lt;enumeration value="integer"/>
 *     &lt;enumeration value="nonPositiveInteger"/>
 *     &lt;enumeration value="nonNegativeInteger"/>
 *     &lt;enumeration value="long"/>
 *     &lt;enumeration value="positiveInteger"/>
 *     &lt;enumeration value="negativeInteger"/>
 *     &lt;enumeration value="int"/>
 *     &lt;enumeration value="unsignedLong"/>
 *     &lt;enumeration value="unsignedInt"/>
 *     &lt;enumeration value="short"/>
 *     &lt;enumeration value="unsignedShort"/>
 *     &lt;enumeration value="byte"/>
 *     &lt;enumeration value="unsignedByte"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "DataTypeType")
@XmlEnum
public enum DataTypeType {


    /**
     * 
     *             Data type indicating length of time either elaspsed or total time of the resource.
     *           
     * 
     */
    @XmlEnumValue("duration")
    DURATION("duration"),

    /**
     * 
     *             Data type indicating the use of dateTime format.
     *           
     * 
     */
    @XmlEnumValue("dateTime")
    DATE_TIME("dateTime"),

    /**
     * 
     *             Data type indicating the current time.
     *           
     * 
     */
    @XmlEnumValue("time")
    TIME("time"),

    /**
     * 
     *             Data type indicating the current date.
     *           
     * 
     */
    @XmlEnumValue("date")
    DATE("date"),

    /**
     * 
     *             Data type indicating the current month and year.
     *           
     * 
     */
    @XmlEnumValue("gYearMonth")
    G_YEAR_MONTH("gYearMonth"),

    /**
     * 
     *             Data type indicating the current year.
     *           
     * 
     */
    @XmlEnumValue("gYear")
    G_YEAR("gYear"),

    /**
     * 
     *             Data type indicating the current day and month.
     *           
     * 
     */
    @XmlEnumValue("gMonthDay")
    G_MONTH_DAY("gMonthDay"),

    /**
     * 
     *             Data type indicating the current day.
     *           
     * 
     */
    @XmlEnumValue("gDay")
    G_DAY("gDay"),

    /**
     * 
     *             Data type indicating the current month.
     *           
     * 
     */
    @XmlEnumValue("gMonth")
    G_MONTH("gMonth"),

    /**
     * 
     *             Data type indicating a true (1) or false (0) value.
     *           
     * 
     */
    @XmlEnumValue("boolean")
    BOOLEAN("boolean"),

    /**
     * 
     *             Data type indicating the use of Base 64 Binary. Base64 is a group of similar binary-to-text encoding schemes 
     *             that represent binary data in an ASCII string format by translating it into a radix-64 representation.
     *           
     * 
     */
    @XmlEnumValue("base64Binary")
    BASE_64_BINARY("base64Binary"),

    /**
     * 
     *             Data type indicating a hex binary data format that uses the radix-16 representation.
     *           
     * 
     */
    @XmlEnumValue("hexBinary")
    HEX_BINARY("hexBinary"),

    /**
     * 
     *             Data type indicating the use of Float. This is a single precision floating-point type.
     *           
     * 
     */
    @XmlEnumValue("float")
    FLOAT("float"),

    /**
     * 
     *             Data type indicating the use of Double. This is a double precision floating-point type.
     *           
     * 
     */
    @XmlEnumValue("double")
    DOUBLE("double"),

    /**
     * 
     *             Data type indicating the use of a Universal Resource Identifier formatted string.
     *           
     * 
     */
    @XmlEnumValue("anyURI")
    ANY_URI("anyURI"),

    /**
     * 
     *             Data type indicating a decimal format that uses the radix-10 representation.
     *           
     * 
     */
    @XmlEnumValue("decimal")
    DECIMAL("decimal"),

    /**
     * 
     *             Data type indicating an integer which is a number that can be written without a fractional or decimal component.
     *           
     * 
     */
    @XmlEnumValue("integer")
    INTEGER("integer"),

    /**
     * 
     *             Data type indicating a non-positive integer which is a number that can be written without a fractional or decimal component (less than or equal to 0).
     *             The set of integers is a subset of the real numbers, and consists of the whole negatives of natural numbers including zero (0, −1, −2, −3, ...).
     *           
     * 
     */
    @XmlEnumValue("nonPositiveInteger")
    NON_POSITIVE_INTEGER("nonPositiveInteger"),

    /**
     * 
     *             Data type indicating a non-negative integer which is a number that can be written without a fractional or decimal component (greater than or equal to 0).
     *             The set of integers is a subset of the real numbers, and consists of the whole numbers including zero (0, 1, 2, 3, ...).
     *           
     * 
     */
    @XmlEnumValue("nonNegativeInteger")
    NON_NEGATIVE_INTEGER("nonNegativeInteger"),

    /**
     * 
     *             Data type indicating a long signed integer type. At least 32 bits in size.
     *             A long integer can represent a whole integer number whose range is greater 
     *             than or equal to that of a standard integer on the same machine.
     *           
     * 
     */
    @XmlEnumValue("long")
    LONG("long"),

    /**
     * 
     *             Data type indicating a positive integer which is a number that can be written without a fractional or decimal component. 
     *             The set of integers is a subset of the real numbers, and consists of the whole numbers (1, 2, 3, ...).
     *           
     * 
     */
    @XmlEnumValue("positiveInteger")
    POSITIVE_INTEGER("positiveInteger"),

    /**
     * 
     *             Data type indicating a negative integer which is a number that can be written without a fractional or decimal component.
     *             The set of integers is a subset of the real numbers, and consists of the whole negatives of the non-zero natural numbers (−1, −2, −3, ...).
     *           
     * 
     */
    @XmlEnumValue("negativeInteger")
    NEGATIVE_INTEGER("negativeInteger"),

    /**
     * 
     *             Data type indicating a basic signed integer type. At least 16 bits in size.
     *           
     * 
     */
    @XmlEnumValue("int")
    INT("int"),

    /**
     * 
     *             Data type indicating an unsigned long signed integer type, same as long, but unsigned.
     *           
     * 
     */
    @XmlEnumValue("unsignedLong")
    UNSIGNED_LONG("unsignedLong"),

    /**
     * 
     *             Data type indicating a basic unsigned integer type, same as int, but unsigned.
     *           
     * 
     */
    @XmlEnumValue("unsignedInt")
    UNSIGNED_INT("unsignedInt"),

    /**
     * 
     *             Data type indicating a short signed integer type. At least 16 bits in size. 
     *             A short integer can represent a whole number which may take less storage, 
     *             while having a smaller range, compared with a standard integer on the same machine.
     *           
     * 
     */
    @XmlEnumValue("short")
    SHORT("short"),

    /**
     * 
     *             Data type indicating a short unsigned integer type, same as short, but unsigned.
     *           
     * 
     */
    @XmlEnumValue("unsignedShort")
    UNSIGNED_SHORT("unsignedShort"),

    /**
     * 
     *             Data type indicating a signed byte as an addressable unit of data storage (usually 8-bits) 
     *             large enough to hold any member of the basic character set of the execution environment.
     *           
     * 
     */
    @XmlEnumValue("byte")
    BYTE("byte"),

    /**
     * 
     *             Data type indicating an unsigned byte type, same as byte, but unsigned.
     *           
     * 
     */
    @XmlEnumValue("unsignedByte")
    UNSIGNED_BYTE("unsignedByte");
    private final String value;

    DataTypeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DataTypeType fromValue(String v) {
        for (DataTypeType c: DataTypeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
